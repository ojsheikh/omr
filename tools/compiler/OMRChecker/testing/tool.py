###############################################################################
#
# (c) Copyright IBM Corp. 2016, 2016
#
#  This program and the accompanying materials are made available
#  under the terms of the Eclipse Public License v1.0 and
#  Apache License v2.0 which accompanies this distribution.
#
#      The Eclipse Public License is available at
#      http://www.eclipse.org/legal/epl-v10.html
#
#      The Apache License v2.0 is available at
#      http://www.opensource.org/licenses/apache2.0.php
#
# Contributors:
#    Multiple authors (IBM Corp.) - initial implementation and documentation
###############################################################################

import os
import subprocess

class ToolOutput:
   '''Represents the output generated by a call to tool.'''

   def __init__(self, returncode, stderr, stdout):
      self.returncode = returncode  # the return code of the command
      self.stderr = stderr          # the standard error output of the command
      self.stdout = stdout          # the standard output of the command

   @staticmethod
   def fromProcess(proc):
      '''Constructs output object from process object'''

      return ToolOutput(proc.returncode, proc.stderr.read(), proc.stdout.read())


class ToolExecutionLog:
   '''Represents a log of a tool invocation/execution.'''

   def __init__(self, args, cmd, output):
      self.args = args
      self.cmd = cmd
      self.cmdstr = ' '.join(cmd)
      self.output = output

      
class Tool(object):
   '''A wrapper providing an interface for interacting with a tool.'''
   
   def __init__(self, cmdBuilder, env={}):
      self.cmdBuilder = cmdBuilder
      self.env = env
   
   def call(self, args):
      '''Calls the tool with the required arguments.'''

      command = self.cmdBuilder(args)

      p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=self.env)
      p.wait()

      output = ToolOutput.fromProcess(p)
      log = ToolExecutionLog(args, command, output)

      p.stdout.close()
      p.stderr.close()

      return log
